from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QMessageBox

from BruteForceDialog_F import Ui_BruteForceDialog # type: ignore
from MitigationAndReport_F import Ui_Mitigation # type: ignore

from BackEnd.vulnerability_assessment import query_nvd # type: ignore
from BackEnd.mitigation import check_if_have_vuls

class Ui_VulnerabilityAssessment(object):

    def __init__(self):
        self.detected_IP_cameras = {}
        self.detected_vulnerabilities = []
        self.detected_vulnerabilities_2 = []
        self.all_vulnerabilities = []
        self.ip_range = []
        self.selectedIP = ""
        self.currentIP = ""

    def setupUi(self, VulnerabilityAssessment, detected_camera, previous_window):

        self.detected_IP_cameras = detected_camera
        self.ICP_window = previous_window

        VulnerabilityAssessment.setObjectName("VulnerabilityAssessment")
        VulnerabilityAssessment.resize(850, 778)
        VulnerabilityAssessment.setContextMenuPolicy(QtCore.Qt.DefaultContextMenu)
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap("cameras_television_system_security_camera_video_cam_cctv_casino_icon_255630.ico"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        VulnerabilityAssessment.setWindowIcon(icon)
        self.centralwidget = QtWidgets.QWidget(VulnerabilityAssessment)
        self.centralwidget.setObjectName("centralwidget")

        self.frame = QtWidgets.QFrame(self.centralwidget)
        self.frame.setGeometry(QtCore.QRect(0, 0, 841, 801))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.frame.setFont(font)
        self.frame.setFrameShape(QtWidgets.QFrame.NoFrame)
        self.frame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame.setObjectName("frame")

        push_button_label = """
            QPushButton {
                background-color: #3B82F6; /* Blue background */
                color: white; /* White text */
                font-size: 20px; /* Text size */
                border-radius: 10px; /* Rounded corners */
                padding: 8px; /* Padding */
                border: 2px solid #2563EB; /* Border color */
            }
            QPushButton:hover {
                background-color: #2563EB; /* Slightly darker blue on hover */
            }
            QPushButton:pressed {
                background-color: #1D4ED8; /* Even darker blue on press */
            }
        """

        list_widget_style = """
            QListWidget {
                background-color: #F9F9F9; /* Light background */
                border: 1px solid #CCCCCC; /* Light gray border */
                border-radius: 8px; /* Rounded corners */
                padding: 5px; /* Padding inside the list */
                font-size: 16px; /* Font size for items */
            }
            QListWidget::item {
                background-color: #FFFFFF; /* Default item background */
                color: #333333; /* Text color */
                padding: 10px; /* Padding for items */
                border: none; /* No border */
            }
            QListWidget::item:hover {
                background-color: #E0F7FA; /* Light blue on hover */
                color: #00796B; /* Darker text on hover */
            }
            QListWidget::item:selected {
                background-color: #ADD8E6; /* Light blue for selected item */
                color: #333333; /* Darker text for better contrast */
            }
            QListWidget::item:selected:active {
                background-color: #87CEEB; /* Slightly darker blue when active */
            }
            QScrollBar:vertical {
                border: none;
                background: #F0F0F0; /* Scrollbar track background */
                width: 10px; /* Width of the vertical scrollbar */
                margin: 0px 0px 0px 0px;
            }
            QScrollBar::handle:vertical {
                background: #CCCCCC; /* Handle color */
                min-height: 20px; /* Minimum height of the handle */
                border-radius: 5px; /* Rounded handle */
            }
            QScrollBar::handle:vertical:hover {
                background: #B0B0B0; /* Darker handle color on hover */
            }
            QScrollBar::add-line:vertical,
            QScrollBar::sub-line:vertical {
                height: 0px; /* Hide add and sub buttons */
            }
            QScrollBar::add-page:vertical,
            QScrollBar::sub-page:vertical {
                background: none; /* Transparent */
            }
        """

        self.select_label = QtWidgets.QLabel(self.frame)
        self.select_label.setGeometry(QtCore.QRect(20, 20, 380, 16))
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setBold(True)
        self.select_label.setFont(font)
        self.select_label.setObjectName("select_label")

        self.detected_ip_camera_listWidget = QtWidgets.QListWidget(self.frame)
        self.detected_ip_camera_listWidget.setGeometry(QtCore.QRect(40, 50, 771, 111))
        self.detected_ip_camera_listWidget.setStyleSheet(list_widget_style)
        self.detected_ip_camera_listWidget.setObjectName("detected_ip_camera_listWidget")

        for ip, services in self.detected_IP_cameras.items():
            camera = f"IP: {ip}: \n"
            camera_service = ""

            for service in services['services']:
                camera_service = f"{camera_service} \tPort: {service['port']} | Service: {service['service']} | Product: {service['product']} | Version: {service['version']}\n"

            camera = f"{camera}{camera_service}"
            self.detected_ip_camera_listWidget.addItem(camera)

        self.provide_label = QtWidgets.QLabel(self.frame)
        self.provide_label.setGeometry(QtCore.QRect(20, 170, 600, 30))
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setBold(True)
        self.provide_label.setFont(font)
        self.provide_label.setObjectName("provide_label")

        self.vendor_label = QtWidgets.QLabel(self.frame)
        self.vendor_label.setGeometry(QtCore.QRect(180, 215, 91, 21))
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setBold(True)
        self.vendor_label.setFont(font)
        self.vendor_label.setObjectName("vendor_label")

        self.firmware_label = QtWidgets.QLabel(self.frame)
        self.firmware_label.setGeometry(QtCore.QRect(73, 252, 190, 21))
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setBold(True)
        self.firmware_label.setFont(font)
        self.firmware_label.setObjectName("firmware_label")

        self.nvd_label = QtWidgets.QLabel(self.frame)
        self.nvd_label.setGeometry(QtCore.QRect(121, 292, 150, 25))
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setBold(True)
        self.nvd_label.setFont(font)
        self.nvd_label.setObjectName("nvd_label")

        self.vendor_textEdit = QtWidgets.QTextEdit(self.frame)
        self.vendor_textEdit.setGeometry(QtCore.QRect(280, 210, 511, 31))
        self.vendor_textEdit.setObjectName("vendor_textEdit")

        self.firmware_textEdit = QtWidgets.QTextEdit(self.frame)
        self.firmware_textEdit.setGeometry(QtCore.QRect(280, 250, 511, 31))
        self.firmware_textEdit.setObjectName("firmware_textEdit")

        self.nvd_textEdit = QtWidgets.QTextEdit(self.frame)
        self.nvd_textEdit.setGeometry(QtCore.QRect(280, 290, 511, 31))
        self.nvd_textEdit.setObjectName("nvd_textEdit")

        self.not_applicable_label = QtWidgets.QLabel(self.frame)
        self.not_applicable_label.setGeometry(QtCore.QRect(20, 330, 551, 31))
        font = QtGui.QFont()
        font.setFamily("Segoe UI")
        font.setPointSize(10)
        self.not_applicable_label.setFont(font)
        self.not_applicable_label.setObjectName("not_applicable_label")

        self.vs_pushButton = QtWidgets.QPushButton(self.frame, clicked = lambda: self.vulnerability_scanning())
        self.vs_pushButton.setGeometry(QtCore.QRect(150, 370, 221, 51))
        self.vs_pushButton.setObjectName("vs_pushButton")
        self.vs_pushButton.setStyleSheet(push_button_label)

        self.bfa_pushButton = QtWidgets.QPushButton(self.frame, clicked = lambda: self.open_BFD_Window())
        self.bfa_pushButton.setGeometry(QtCore.QRect(470, 370, 221, 51))
        self.bfa_pushButton.setObjectName("bfa_pushButton")
        self.bfa_pushButton.setStyleSheet(push_button_label)

        self.note_label = QtWidgets.QLabel(self.frame)
        self.note_label.setGeometry(QtCore.QRect(20, 430, 761, 31))
        font = QtGui.QFont()
        font.setFamily("Segoe UI")
        font.setPointSize(10)
        self.note_label.setFont(font)
        self.note_label.setObjectName("note_label")
        
        self.note_label_2 = QtWidgets.QLabel(self.frame)
        self.note_label_2.setGeometry(QtCore.QRect(30, 450, 761, 31))
        font = QtGui.QFont()
        font.setFamily("Segoe UI")
        font.setPointSize(10)
        self.note_label_2.setFont(font)
        self.note_label_2.setObjectName("note_label_2")

        self.detected_vulnerabilities_label = QtWidgets.QLabel(self.frame)
        self.detected_vulnerabilities_label.setGeometry(QtCore.QRect(20, 510, 491, 21))
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setBold(True)
        self.detected_vulnerabilities_label.setFont(font)
        self.detected_vulnerabilities_label.setObjectName("detected_vulnerabilities_label")

        self.line = QtWidgets.QFrame(self.frame)
        self.line.setGeometry(QtCore.QRect(0, 490, 841, 16))
        self.line.setLineWidth(2)
        self.line.setFrameShape(QtWidgets.QFrame.HLine)
        self.line.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line.setObjectName("line")

        self.detected_vulnerabilities_listWidget = QtWidgets.QListWidget(self.frame)
        self.detected_vulnerabilities_listWidget.setGeometry(QtCore.QRect(40, 550, 781, 111))
        self.detected_vulnerabilities_listWidget.setStyleSheet(list_widget_style)
        self.detected_vulnerabilities_listWidget.setObjectName("detected_vulnerabilities_listWidget")

        self.mitigation_pushButton = QtWidgets.QPushButton(self.frame, clicked = lambda: self.open_MR_window())
        self.mitigation_pushButton.setGeometry(QtCore.QRect(150, 680, 221, 51))
        self.mitigation_pushButton.setObjectName("mitigation_pushButton")
        self.mitigation_pushButton.setStyleSheet(push_button_label)

        self.va_back_pushButton = QtWidgets.QPushButton(self.frame, clicked = lambda: self.open_ICD_Window())
        self.va_back_pushButton.setGeometry(QtCore.QRect(470, 680, 221, 51))
        self.va_back_pushButton.setObjectName("va_back_pushButton")
        self.va_back_pushButton.setStyleSheet(push_button_label)

        VulnerabilityAssessment.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(VulnerabilityAssessment)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 850, 26))
        self.menubar.setObjectName("menubar")

        VulnerabilityAssessment.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(VulnerabilityAssessment)
        self.statusbar.setObjectName("statusbar")
        VulnerabilityAssessment.setStatusBar(self.statusbar)

        self.retranslateUi(VulnerabilityAssessment)
        QtCore.QMetaObject.connectSlotsByName(VulnerabilityAssessment)

        self.VA_window = VulnerabilityAssessment

    def retranslateUi(self, VulnerabilityAssessment):
        _translate = QtCore.QCoreApplication.translate
        VulnerabilityAssessment.setWindowTitle(_translate("VulnerabilityAssessment", "VulnerabilityAssessment"))
        self.select_label.setText(_translate("VulnerabilityAssessment", "Select one of the IP Camera below:"))
        self.provide_label.setText(_translate("VulnerabilityAssessment", "Provide Addtional IP Camera Information if Applicable:"))
        self.vendor_label.setText(_translate("VulnerabilityAssessment", "Vendor:"))
        self.firmware_label.setText(_translate("VulnerabilityAssessment", "Firmware Version:"))
        self.nvd_label.setText(_translate("VulnerabilityAssessment", "NVD API Key:"))
        self.vendor_textEdit.setPlaceholderText(_translate("VulnerabilityAssessment", "Vendor"))
        self.firmware_textEdit.setPlaceholderText(_translate("VulnerabilityAssessment", "Firmware Version"))
        self.nvd_textEdit.setPlaceholderText(_translate("VulnerabilityAssessment", "NVD API Key"))
        self.not_applicable_label.setText(_translate("VulnerabilityAssessment", "* If not applicable, just leave it empty and proceed"))
        self.vs_pushButton.setText(_translate("VulnerabilityAssessment", "Vulnerability Scanning"))
        self.bfa_pushButton.setText(_translate("VulnerabilityAssessment", "Brute Force Attack"))
        self.note_label.setText(_translate("VulnerabilityAssessment", "*Note: One time can only process with one IP Camera, if you have multiple cameras, select again onthe list above and click the"))
        self.note_label_2.setText(_translate("VulnerabilityAssessment", "button again!"))
        self.detected_vulnerabilities_label.setText(_translate("VulnerabilityAssessment", "Detected Vulnerabilities List:"))
        self.mitigation_pushButton.setText(_translate("VulnerabilityAssessment", "Mitigation"))
        self.va_back_pushButton.setText(_translate("VulnerabilityAssessment", "Back"))


    def open_ICD_Window(self):
        self.ICP_window.show()
        self.VA_window.close()

    def open_BFD_Window(self):

        # Get the selected item from the QListWidget
        selected_items = self.detected_ip_camera_listWidget.selectedItems()

        # Check if any item is selected
        if selected_items:
            # Extract the text of the selected item
            selected_item_text = selected_items[0].text()
            first_line = selected_item_text.split('\n')[0]
            self.selectedIP = first_line.replace("IP: ", "").split(':')[0].strip()

            self.BFD_window = QtWidgets.QMainWindow()
            self.ui = Ui_BruteForceDialog()
            self.ui.setupUi(self.BFD_window, self.detected_IP_cameras, self.VA_window, self.selectedIP, self)
            self.BFD_window.show()
        else:
            # Show an error message if no item is selected
            msg = QMessageBox()
            msg.setWindowTitle("Error - You haven't select an IP camera yet")
            msg.setText("Please select an IP camera from the list before proceeding!")
            msg.setIcon(QMessageBox.Warning)
            msg.setWindowIcon(QtGui.QIcon("cameras_television_system_security_camera_video_cam_cctv_casino_icon_255630.ico"))
            msg.exec_()


    def remove_duplicate_list(self, my_list):
        # Step 1: Convert each sublist to a tuple
        tuple_list = []  # To hold tuples converted from sublists
        for sublist in my_list:
            tuple_list.append(tuple(sublist))  # Convert each sublist into a tuple

        # Step 2: Create a set of tuples to remove duplicates
        unique_tuples = set(tuple_list)  # Using a set will remove duplicates automatically

        # Step 3: Convert the unique tuples back to lists
        my_list_clear = []  # To hold the unique lists
        for unique_tuple in unique_tuples:
            my_list_clear.append(list(unique_tuple))  # Convert each tuple back into a list

        return my_list_clear

    def vulnerability_scanning(self):
        # Get the selected item from the QListWidget
        selected_items = self.detected_ip_camera_listWidget.selectedItems()

        # Check if any item is selected
        if selected_items:
            # Extract the text of the selected item
            selected_item_text = selected_items[0].text()
            first_line = selected_item_text.split('\n')[0]
            self.selectedIP = first_line.replace("IP: ", "").split(':')[0].strip()

            vendor = self.vendor_textEdit.toPlainText()
            firmware_version = self.firmware_textEdit.toPlainText()
            nvd_api = self.nvd_textEdit.toPlainText()
            services_list = self.detected_IP_cameras[self.selectedIP]

            service_version = []

            for definition, data in services_list.items():
                    if definition == 'services':
                        for service in data:
                                service_version.append({'service': service['service'], 'version': service['version']})
            
            if vendor != "" or firmware_version != "":
                service_version.append({'service': vendor, 'version': firmware_version})

            if vendor == "":
                vendor = "Unknown"
            if firmware_version == "":
                firmware_version = "Unknown"

            self.detected_IP_cameras[self.selectedIP]["detail"] = {"vendor": vendor, "firmware version": firmware_version}

            vuln_list_1 = query_nvd(service_version, nvd_api)

            self.detected_vulnerabilities = self.detected_vulnerabilities + vuln_list_1
            self.detected_vulnerabilities = self.remove_duplicate_list(self.detected_vulnerabilities)
            
            if self.currentIP != self.selectedIP:
                self.detected_vulnerabilities_2 = []
            self.update_vulnerabilities_view()
        else:
            # Show an error message if no item is selected
            msg = QMessageBox()
            msg.setWindowTitle("Error - You haven't select an IP camera yet")
            msg.setText("Please select an IP camera from the list before proceeding!")
            msg.setIcon(QMessageBox.Warning)
            msg.setWindowIcon(QtGui.QIcon("cameras_television_system_security_camera_video_cam_cctv_casino_icon_255630.ico"))
            msg.exec_()
    
    def get_second_vulns(self, vulnerabilities_from_brute_forcing):
        self.detected_vulnerabilities_2 = self.detected_vulnerabilities_2 + vulnerabilities_from_brute_forcing
        self.detected_vulnerabilities_2 = self.remove_duplicate_list(self.detected_vulnerabilities_2)

        if self.currentIP != self.selectedIP:
            self.detected_vulnerabilities = []

        self.update_vulnerabilities_view()


    def update_vulnerabilities_view(self):
        self.all_vulnerabilities = self.detected_vulnerabilities + self.detected_vulnerabilities_2
        self.detected_vulnerabilities_listWidget.clear()

        self.detected_IP_cameras[self.selectedIP]['vulnerabilities'] = self.all_vulnerabilities

        self.ip_range, self.detected_IP_cameras = check_if_have_vuls(self.detected_IP_cameras)
        self.currentIP = self.selectedIP

        for ip, data in self.detected_IP_cameras.items():
            camera = f"IP: {ip}: \n"
            camera_vulnerabilities = ""

            for vulns in data['vulnerabilities']:
                camera_vulnerabilities = " | ".join(vulns)

                camera_vulns = f"{camera}{camera_vulnerabilities}\n"
                self.detected_vulnerabilities_listWidget.addItem(camera_vulns)
        

    def open_MR_window(self):
        msg = QMessageBox()
        msg.setWindowTitle("Error in Mitigation Query")
        msg.setText("Your detected IP Cameras have not any vulnerabilities in the list! Please try the vulnerability assessment again before conducting mitigation query!")
        msg.setIcon(QMessageBox.Warning)
        msg.setWindowIcon(QtGui.QIcon("cameras_television_system_security_camera_video_cam_cctv_casino_icon_255630.ico"))

        try:
            self.MR_window = QtWidgets.QMainWindow()
            self.ui = Ui_Mitigation()
            self.ui.setupUi(self.MR_window, self.detected_IP_cameras, self.VA_window, self.ip_range)
            self.MR_window.show()
        except:
            x = msg.exec_()
    
if __name__ == "__main__":

    '''
    For testing purpose
    '''
    testing_camera = {
     '192.168.82.13': 
       {'services': [{'port': 8554, 'service': 'rtsp', 'product': 'VLC rtspd', 'version': '1.1.9'}, {'port': 8556, 'service': 'rtsp', 'product': 'VLC rtspd', 'version': '1.1.9'}]},
    '192.168.1.110': 
       {'services': [{'port': 8554, 'service': 'rtsp', 'product': 'VLC rtspd', 'version': '1.1.9'}, {'port': 8556, 'service': 'rtsp', 'product': 'VLC rtspd', 'version': '1.1.9'}]}
    }
    import sys
    app = QtWidgets.QApplication(sys.argv)
    VulnerabilityAssessment = QtWidgets.QMainWindow()
    ui = Ui_VulnerabilityAssessment()
    ui.setupUi(VulnerabilityAssessment, testing_camera, VulnerabilityAssessment)
    VulnerabilityAssessment.show()
    sys.exit(app.exec_())

    '''
    For testing purpose
    '''

    ''' 
    #Real Use Case
    import sys
    app = QtWidgets.QApplication(sys.argv)
    VulnerabilityAssessment = QtWidgets.QMainWindow()
    ui = Ui_VulnerabilityAssessment()
    ui.setupUi(VulnerabilityAssessment)
    VulnerabilityAssessment.show()
    sys.exit(app.exec_())
    '''

